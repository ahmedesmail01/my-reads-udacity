{"version":3,"sources":["BooksAPI.js","components/Header.js","components/SingleBook.js","components/Shelf.js","components/Shelfs.js","components/SearchPage.js","components/BookDetails.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","Header","className","SingleBook","book","changeShelf","image","imageLinks","thumbnail","to","id","style","width","height","backgroundImage","onChange","e","shelf","target","value","swal","disabled","title","authors","Shelf","Books","map","Shelfs","allBooks","currentReading","filter","Book","wantToRead","read","SearchPage","useState","search","setSearch","minLength","debounceTimeout","element","type","placeholder","query","length","maxResults","fetch","method","body","JSON","stringify","then","res","json","data","books","API","error","finalBooks","alreadyToken","find","B","BookDetails","setBook","params","useParams","console","log","useEffect","bookId","pageCount","description","publishedDate","App","setAllBooks","allbooks","concat","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAAMA,EAAM,wCAERC,EAAQC,aAAaD,MAEpBA,IAAOA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAE5E,IAAMC,EAAU,CACdC,OAAQ,mBACRC,cAAeR,G,eCMFS,MAVf,WACE,OACE,mCACE,qBAAKC,UAAU,gBAAf,SACE,+C,wBCiDOC,MApDf,YAA4C,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAUtBC,EAAQF,EAAKG,WACbH,EAAKG,WAAWC,UAChB,iEAEJ,OACE,mCACE,6BACE,sBAAKN,UAAU,OAAf,UACE,sBAAKA,UAAU,WAAf,UACE,cAAC,IAAD,CAAMO,GAAE,iCAA4BL,EAAKM,IAAzC,SACE,qBACER,UAAU,aACVS,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAAgB,QAAD,OAAUR,EAAV,WAKrB,qBAAKJ,UAAU,qBAAf,SACE,yBAAQa,SA5BJ,SAACC,GACf,IAAMC,EAAQD,EAAEE,OAAOC,MACvBd,EAAYD,EAAMa,GAElBG,IAAK,QAAD,wCAA2CH,EAA3C,KAAqD,YAwBpBE,MAAOf,EAAKa,MAAvC,UACE,wBAAQE,MAAM,OAAOE,UAAQ,EAA7B,wBAGA,wBAAQF,MAAM,mBAAd,+BACA,wBAAQA,MAAM,aAAd,0BACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,0BAIN,qBAAKjB,UAAU,aAAf,SAA6BE,EAAKkB,QAClC,qBAAKpB,UAAU,eAAf,SACGE,EAAKmB,QAAUnB,EAAKmB,QAAQ,GAAK,0BA5B/BnB,EAAKM,OCSLc,MAvBf,YAA+C,IAA9BF,EAA6B,EAA7BA,MAAOG,EAAsB,EAAtBA,MAAOpB,EAAe,EAAfA,YAC7B,OACE,mCACE,sBAAKH,UAAU,YAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCoB,IACjC,qBAAKpB,UAAU,kBAAf,SACE,oBAAIA,UAAU,aAAd,SACGuB,EAAMC,KAAI,SAACtB,GACV,OACE,cAAC,EAAD,CAEEA,KAAMA,EACNC,YAAaA,GAFRD,EAAKM,iBCkBbiB,MA7Bf,YAA4C,IAA1BC,EAAyB,EAAzBA,SAAUvB,EAAe,EAAfA,YAEpBwB,EAAiBD,EAASE,QAC9B,SAACC,GAAD,MAAyB,qBAAfA,EAAKd,SAGXe,EAAaJ,EAASE,QAAO,SAACC,GAAD,MAAyB,eAAfA,EAAKd,SAE5CgB,EAAOL,EAASE,QAAO,SAACC,GAAD,MAAyB,SAAfA,EAAKd,SAE5C,OACE,mCACE,sBAAKf,UAAU,qBAAf,UACE,cAAC,EAAD,CACEoB,MAAO,oBACPG,MAAOI,EACPxB,YAAaA,IAEf,cAAC,EAAD,CACEiB,MAAO,eACPG,MAAOO,EACP3B,YAAaA,IAEf,cAAC,EAAD,CAAOiB,MAAO,OAAQG,MAAOQ,EAAM5B,YAAaA,U,wBC+CzC6B,MApEf,YAAgD,IAA1BN,EAAyB,EAAzBA,SAAUvB,EAAe,EAAfA,YAAe,EACjB8B,mBAAS,IADQ,mBACtCC,EADsC,KAC9BC,EAD8B,KA2B7C,OACE,mCACE,sBAAKnC,UAAU,eAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,cAAC,IAAD,CAAMO,GAAG,oBAAoBP,UAAU,eAAvC,mBAGA,qBAAKA,UAAU,6BAAf,SACE,cAAC,IAAD,CACEoC,UAAW,EACXC,gBAAiB,IACjBC,QAAQ,QACRC,KAAK,OACLC,YAAY,4BACZ3B,SArCU,SAACC,GACrB,IAAM2B,EAAQ3B,EAAEE,OAAOC,MACF,IAAjBwB,EAAMC,OLiBQ,SAACD,EAAOE,GAAR,OACpBC,MAAM,GAAD,OAAIvD,EAAJ,WAAkB,CACrBwD,OAAQ,OACRjD,QAAQ,2BACHA,GADE,IAEL,eAAgB,qBAElBkD,KAAMC,KAAKC,UAAU,CAAEP,QAAOE,iBAE7BM,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUA,EAAKC,SKvBrBC,CAAWb,EAAO,IAAIQ,MAAK,SAACC,GAE1B,GAAKA,IAAOA,EAAIK,MAAhB,CAMA,IAAMC,EAAaN,EAAI1B,KAAI,SAACtB,GAC1B,IAAMuD,EAAe/B,EAASgC,MAAK,SAACC,GAAD,OAAOA,EAAEnD,KAAON,EAAKM,MAExD,OADAN,EAAKa,MAAQ0C,EAAeA,EAAa1C,MAAQ,OAC1Cb,KAGTiC,EAAUqB,QAXRrB,EAAU,OANZA,EAAU,YA2CR,qBAAKnC,UAAU,uBAAf,SACE,oBAAIA,UAAU,aAAd,SACGkC,EAAOV,KAAI,SAACtB,GACX,OACE,cAAC,EAAD,CAEEA,KAAMA,EACNC,YAAaA,GAFRD,EAAKM,iB,MClBboD,MApCf,WAAwB,IAAD,EACG3B,mBAAS,IADZ,mBACd/B,EADc,KACR2D,EADQ,KAGfC,EAASC,cACfC,QAAQC,IAAIH,GAEZ,IAAI1D,EAAQF,EAAKG,WACbH,EAAKG,WAAWC,UAChB,iEAQJ,OANA4D,qBAAU,WNRO,IAACC,KMSRL,EAAOK,ONRjBvB,MAAM,GAAD,OAAIvD,EAAJ,kBAAiB8E,GAAU,CAAEvE,YAC/BqD,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUA,EAAKlD,SMME+C,MAAK,SAACC,GAC3BW,EAAQX,GACRc,QAAQC,IAAIf,QAEb,CAACY,EAAOK,SAET,mCACE,sBAAKnE,UAAU,SAAf,UACE,sBAAKA,UAAU,OAAf,UACE,6BAAKE,EAAKkB,QACV,8CAAiBlB,EAAKkE,aACtB,4BAAIlE,EAAKmE,cACT,4BAAInE,EAAKoE,mBAEX,qBACEtE,UAAU,eACVS,MAAO,CACLG,gBAAgB,QAAD,OAAUR,EAAV,eCmCZmE,MA9Df,WAAgB,IAAD,EACmBtC,mBAAS,IAD5B,mBACNP,EADM,KACI8C,EADJ,KAGbN,qBAAU,WPIVtB,MAAM,GAAD,OAAIvD,EAAJ,UAAiB,CAAEO,YACrBqD,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUA,EAAKC,SOLRJ,MAAK,SAACC,GACjBsB,EAAYtB,GACZc,QAAQC,IAAIf,QAEb,IAIH,IAAM/C,EAAc,SAACD,EAAMa,GACzBb,EAAKa,MAAQA,EACbyD,GAAY,SAACC,GACX,OAAOA,EAAS7C,QAAO,SAAC+B,GAAD,OAAOA,EAAEnD,KAAON,EAAKM,MAAIkE,OAAO,CAACxE,OPJxC,SAACA,EAAMa,GAC3B6B,MAAM,GAAD,OAAIvD,EAAJ,kBAAiBa,EAAKM,IAAM,CAC/BqC,OAAQ,MACRjD,QAAQ,2BACHA,GADE,IAEL,eAAgB,qBAElBkD,KAAMC,KAAKC,UAAU,CAAEjC,YACtBkC,MAAK,SAACC,GAAD,OAASA,EAAIC,UOFnBG,CAAWpD,EAAMa,IAEnB,OACE,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,CACE4D,KAAK,oBACLrC,QACE,qCACE,cAAC,EAAD,IACqB,IAApBZ,EAASgB,OACR,qCACE,cAAC,EAAD,CAAQhB,SAAUA,EAAUvB,YAAaA,IACzC,qBAAKH,UAAU,cAAf,SACE,cAAC,IAAD,CAAMO,GAAG,2BAAT,2BAIJ,oBAAIP,UAAU,SAAd,6BAKR,cAAC,IAAD,CACE2E,KAAK,2BACLrC,QACE,mCACE,cAAC,EAAD,CAAYZ,SAAUA,EAAUvB,YAAaA,QAInD,cAAC,IAAD,CACEwE,KAAK,iCACLrC,QACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,eCzDdsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.53403cfd.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","//\r\nimport \"./styles/header.css\";\r\n\r\n//header component\r\nfunction Header() {\r\n  return (\r\n    <>\r\n      <div className=\"header-parent\">\r\n        <h1>My Reads</h1>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","//\r\nimport swal from \"sweetalert\";\r\nimport { Link } from \"react-router-dom\";\r\n// this is the single book component\r\n\r\nfunction SingleBook({ book, changeShelf }) {\r\n  // function that take our choose from the options box and give it as parameter to the change shelf function.\r\n  // to handle it through api and shelfes\r\n  const Changer = (e) => {\r\n    const shelf = e.target.value;\r\n    changeShelf(book, shelf);\r\n    //alert shown after the shelf change\r\n    swal(\"Done!\", `You changed the book shelf to ${shelf}!`, \"success\");\r\n  };\r\n\r\n  let image = book.imageLinks\r\n    ? book.imageLinks.thumbnail\r\n    : \"https://books.google.com/googlebooks/images/no_cover_thumb.gif\";\r\n\r\n  return (\r\n    <>\r\n      <li key={book.id}>\r\n        <div className=\"book\">\r\n          <div className=\"book-top\">\r\n            <Link to={`/my-reads-udacity/book/${book.id}`}>\r\n              <div\r\n                className=\"book-cover\"\r\n                style={{\r\n                  width: 128,\r\n                  height: 193,\r\n                  backgroundImage: `url(\"${image}\")`,\r\n                }}\r\n              ></div>\r\n            </Link>\r\n\r\n            <div className=\"book-shelf-changer\">\r\n              <select onChange={Changer} value={book.shelf}>\r\n                <option value=\"none\" disabled>\r\n                  Move to...\r\n                </option>\r\n                <option value=\"currentlyReading\">Currently Reading</option>\r\n                <option value=\"wantToRead\">Want to Read</option>\r\n                <option value=\"read\">Read</option>\r\n                <option value=\"none\">None</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"book-title\">{book.title}</div>\r\n          <div className=\"book-authors\">\r\n            {book.authors ? book.authors[0] : \"Auther is Unknown\"}\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SingleBook;\r\n","//\r\n\r\nimport SingleBook from \"./SingleBook\";\r\n\r\n/* in this component i can use it many times to map over every shelf book \r\nand render its different books \r\n */\r\nfunction Shelf({ title, Books, changeShelf }) {\r\n  return (\r\n    <>\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">{title}</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n            {Books.map((book) => {\r\n              return (\r\n                <SingleBook\r\n                  key={book.id}\r\n                  book={book}\r\n                  changeShelf={changeShelf}\r\n                />\r\n              );\r\n            })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Shelf;\r\n","//\r\n\r\nimport Shelf from \"./Shelf\";\r\n\r\n//shelfs component which hold every book shelf\r\n\r\nfunction Shelfs({ allBooks, changeShelf }) {\r\n  //here i make a new array from the allbooks which is on the Currently reading shelf\r\n  const currentReading = allBooks.filter(\r\n    (Book) => Book.shelf === \"currentlyReading\"\r\n  );\r\n  //here i make a new array from the allbooks which is on the want to read shelf\r\n  const wantToRead = allBooks.filter((Book) => Book.shelf === \"wantToRead\");\r\n  //here i make a new array from the allbooks which is on the read shelf\r\n  const read = allBooks.filter((Book) => Book.shelf === \"read\");\r\n  // then i pass these value in the shelf component as a props\r\n  return (\r\n    <>\r\n      <div className=\"list-books-content\">\r\n        <Shelf\r\n          title={\"Currently reading\"}\r\n          Books={currentReading}\r\n          changeShelf={changeShelf}\r\n        />\r\n        <Shelf\r\n          title={\"Want To Read\"}\r\n          Books={wantToRead}\r\n          changeShelf={changeShelf}\r\n        />\r\n        <Shelf title={\"Read\"} Books={read} changeShelf={changeShelf} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Shelfs;\r\n","//\r\nimport * as API from \"../BooksAPI\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport SingleBook from \"./SingleBook\";\r\nimport DebounceInput from \"react-debounce-input\";\r\n\r\n//this is the search page component\r\nfunction SearchPage({ allBooks, changeShelf }) {\r\n  const [search, setSearch] = useState([]);\r\n  // here i detect the value which user write on the input field\r\n  /* and then i send it to the search method in the api */\r\n  const searchResults = (e) => {\r\n    const query = e.target.value;\r\n    if (query.length === 0) {\r\n      setSearch([]);\r\n      return;\r\n    }\r\n    API.search(query, 20).then((res) => {\r\n      // i handle the error here or null values\r\n      if (!res || res.error) {\r\n        setSearch([]);\r\n        return;\r\n      }\r\n      //here i handle the shelf of all results if it is already in a shelf and select\r\n      //its value in the option list\r\n      const finalBooks = res.map((book) => {\r\n        const alreadyToken = allBooks.find((B) => B.id === book.id);\r\n        book.shelf = alreadyToken ? alreadyToken.shelf : \"none\";\r\n        return book;\r\n      });\r\n      //then i set the search results\r\n      setSearch(finalBooks);\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link to=\"/my-reads-udacity\" className=\"close-search\">\r\n            Close\r\n          </Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            <DebounceInput\r\n              minLength={3}\r\n              debounceTimeout={200}\r\n              element=\"input\"\r\n              type=\"text\"\r\n              placeholder=\"Search by title or author\"\r\n              onChange={searchResults}\r\n            />\r\n            {/* <input\r\n              type=\"text\"\r\n              placeholder=\"Search by title, author, or ISBN\"\r\n              onChange={searchResults}\r\n            /> */}\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\">\r\n            {search.map((book) => {\r\n              return (\r\n                <SingleBook\r\n                  key={book.id}\r\n                  book={book}\r\n                  changeShelf={changeShelf}\r\n                />\r\n              );\r\n            })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchPage;\r\n","//\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./styles/details.css\";\r\nimport * as API from \"../BooksAPI\";\r\n//\r\n\r\n/* this component show the book details as description and pages count and prodction year */\r\n\r\nfunction BookDetails() {\r\n  const [book, setBook] = useState({});\r\n  // i got the book id from the link on clicking it\r\n  const params = useParams();\r\n  console.log(params);\r\n\r\n  let image = book.imageLinks\r\n    ? book.imageLinks.thumbnail\r\n    : \"https://books.google.com/googlebooks/images/no_cover_thumb.gif\";\r\n  // i get the full details for a single book from api usine its id from params\r\n  useEffect(() => {\r\n    API.get(params.bookId).then((res) => {\r\n      setBook(res);\r\n      console.log(res);\r\n    });\r\n  }, [params.bookId]);\r\n  return (\r\n    <>\r\n      <div className=\"holder\">\r\n        <div className=\"info\">\r\n          <h2>{book.title}</h2>\r\n          <p>page count : {book.pageCount}</p>\r\n          <p>{book.description}</p>\r\n          <p>{book.publishedDate}</p>\r\n        </div>\r\n        <div\r\n          className=\"image-holder\"\r\n          style={{\r\n            backgroundImage: `url(\"${image}\")`,\r\n          }}\r\n        ></div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BookDetails;\r\n","import \"./App.css\";\nimport * as API from \"./BooksAPI\";\nimport { useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Shelfs from \"./components/Shelfs\";\nimport { Link, Route, Routes } from \"react-router-dom\";\nimport SearchPage from \"./components/SearchPage\";\nimport BookDetails from \"./components/BookDetails\";\n//\n//\nfunction App() {\n  const [allBooks, setAllBooks] = useState([]);\n  // get all books from api\n  useEffect(() => {\n    API.getAll().then((res) => {\n      setAllBooks(res);\n      console.log(res);\n    });\n  }, []);\n\n  // function which will change the book shelf and update the shelf value in the api\n\n  const changeShelf = (book, shelf) => {\n    book.shelf = shelf;\n    setAllBooks((allbooks) => {\n      return allbooks.filter((B) => B.id !== book.id).concat([book]);\n    });\n    API.update(book, shelf);\n  };\n  return (\n    <>\n      <Routes>\n        <Route\n          path=\"/my-reads-udacity\"\n          element={\n            <>\n              <Header />\n              {allBooks.length !== 0 ? (\n                <>\n                  <Shelfs allBooks={allBooks} changeShelf={changeShelf} />\n                  <div className=\"open-search\">\n                    <Link to=\"/my-reads-udacity/search\">Add Book</Link>\n                  </div>\n                </>\n              ) : (\n                <h1 className=\"loader\">Loading...</h1>\n              )}\n            </>\n          }\n        />\n        <Route\n          path=\"/my-reads-udacity/search\"\n          element={\n            <>\n              <SearchPage allBooks={allBooks} changeShelf={changeShelf} />\n            </>\n          }\n        />\n        <Route\n          path=\"/my-reads-udacity/book/:bookId\"\n          element={\n            <>\n              <Header />\n              <BookDetails />\n            </>\n          }\n        />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}